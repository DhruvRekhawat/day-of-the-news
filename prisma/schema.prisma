generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  Boolean?
  image          String?
  password       String?
  role           Role            @default(FREE)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  followedTopics FollowedTopic[]
  interactions   Interaction[]
  sessions       Session[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  role         Role
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Interaction {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  viewedAt  DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId, viewedAt])
}

model Topic {
  id        String          @id @default(cuid())
  name      String          @unique
  slug      String          @unique
  followers FollowedTopic[]
}

model FollowedTopic {
  userId  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
}

model Article {
  id           String        @id @unique
  originalUri  String        @unique
  title        String
  content      String
  excerpt      String
  url          String
  image        String?
  source       String
  category     String
  publishedAt  DateTime
  aiSummary    String?
  aiBiasReport Json?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  interactions Interaction[]

  @@index([publishedAt])
}

enum Role {
  FREE
  PREMIUM
  ADMIN
}
