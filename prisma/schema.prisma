generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified Boolean?  @default(false)
  image         String?
  role          Role      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  accounts      Account[]

  // Your custom relations
  interactions  Interaction[]
  followedTopics FollowedTopic[]
  eventBookmarks EventBookmark[]
  eventLikes    EventLike[]
  subscriptions Subscription[]
  payments      Payment[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// Your custom models
model Interaction {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  viewedAt  DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, articleId, viewedAt])
}

model Topic {
  id         String     @id @default(cuid())
  name       String     @unique
  slug       String     @unique
  articles   StoryArticle[]

  FollowedTopic FollowedTopic[]
}

model StoryArticle {
  id         String   @id @default(cuid())
  article    Article  @relation(fields: [articleId], references: [id])
  articleId  String
  topic      Topic    @relation(fields: [topicId], references: [id])
  topicId    String
}


model FollowedTopic {
  userId  String
  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, topicId])
}

model Event {
  id          String        @id @default(cuid())
  eventUri    String        @unique
  title       String
  category    String?
  topic       String?
  isTrending  Boolean       @default(false)
  summary     String?
  aiSummary   String?
  image       String?
  publishedAt DateTime
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  articles     EventArticle[]
  bookmarks    EventBookmark[]
  likes        EventLike[]

  @@index([publishedAt])
  @@index([topic])
  @@index([isTrending])
}

model EventArticle {
  id        String   @id @default(cuid())
  eventId   String
  articleId String
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@unique([eventId, articleId])
  @@index([eventId])
}

model Article {
  id           String        @id @unique @default(cuid())
  originalUri  String        @unique
  title        String
  content      String
  excerpt      String
  url          String
  image        String?
  topic        String?
  isTrending   Boolean       @default(false)
  source       String
  category     String
  publishedAt  DateTime
  aiSummary    String?
  aiBiasReport Json?

  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  biasAnalysis BiasAnalysis? // Relation to bias analysis
  interactions Interaction[]
  events       EventArticle[]

  @@index([publishedAt])
  StoryArticle StoryArticle[]
}

// Article-level bias analysis (for source categorization)
model BiasAnalysis {
  id              String   @id @default(cuid())
  articleId       String   @unique
  article         Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)
  
  // AI analysis results
  biasDirection   BiasDirection
  biasStrength    Int      // 1-5 scale
  confidence      Float    // 0.0-1.0
  reasoning       String?
  
  // Processing status
  status          BiasAnalysisStatus @default(PENDING)
  processedAt     DateTime?
  errorMessage    String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@index([status])
  @@index([biasDirection])
}


model EventBookmark {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
}

model EventLike {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
  @@index([userId])
}

model Contact {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}

enum Role {
  FREE
  PREMIUM
  ADMIN
}

model PricingPlan {
  id          String   @id @default(cuid())
  name        String   @unique
  price       Float
  currency    String   @default("INR")
  period      String   @default("monthly") // monthly, yearly
  description String
  features    String[] // Array of features
  isPopular   Boolean  @default(false)
  isActive    Boolean  @default(true)
  razorpayPlanId String? // Razorpay plan ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]

  @@map("pricing_plan")
}

enum BiasDirection {
  FAR_LEFT
  LEFT
  CENTER_LEFT
  CENTER
  CENTER_RIGHT
  RIGHT
  FAR_RIGHT
  UNKNOWN
}

enum BiasAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
  PENDING
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model Subscription {
  id              String             @id @default(cuid())
  userId          String
  planId          String
  planName        String             // Add plan name for easier access
  status          SubscriptionStatus @default(PENDING)
  startDate       DateTime           @default(now())
  endDate         DateTime?
  autoRenew       Boolean            @default(true)
  razorpaySubscriptionId String?
  lastPaymentId   String?            // Add last payment tracking
  lastOrderId     String?            // Add last order tracking
  lastPaymentDate DateTime?          // Add last payment date
  amount          Float?             // Add subscription amount
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan            PricingPlan        @relation(fields: [planId], references: [id])
  payments        Payment[]

  @@unique([userId])
  @@index([userId])
  @@index([status])
  @@index([endDate])
  @@map("subscription")
}

model Payment {
  id                    String        @id @default(cuid())
  subscriptionId        String?
  userId                String
  planId                String?       // Add plan ID for direct reference
  amount                Float
  currency              String        @default("INR")
  status                PaymentStatus @default(PENDING)
  razorpayOrderId       String?
  razorpayPaymentId     String?
  razorpaySignature     String?
  paymentMethod         String?
  description           String?
  paymentDate           DateTime?     // Add payment date
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt

  // Relations
  subscription          Subscription? @relation(fields: [subscriptionId], references: [id])
  user                  User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([razorpayPaymentId])
  @@map("payment")
}