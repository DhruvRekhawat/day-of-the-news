// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Make sure your prisma/schema.prisma has the correct enum definition
enum Role {
  FREE
  PREMIUM
  ADMIN
}

// User model for Better Auth
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified Boolean?
  image         String?
  password      String?   // Password should be stored in User model
  role          Role      @default(FREE)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
 
  // Better Auth provider accounts (Google, etc.)
  accounts Account[]
 
  // Better Auth sessions
  sessions Session[]
 
  // Track user interactions
  interactions Interaction[]
 
  // Track followed topics
  followedTopics FollowedTopic[]
}

// Account model for Better Auth (only for social providers)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}

// Session model for Better Auth
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  role         Role      
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Verification token model for Better Auth
model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
 
  @@unique([identifier, token])
}

// Model to track each article a user views
model Interaction {
  id        String   @id @default(cuid())
  userId    String
  articleId String
  viewedAt  DateTime @default(now())
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Article @relation(fields: [articleId], references: [id], onDelete: Cascade)
  @@unique([userId, articleId, viewedAt])
}

// Model for topics users can follow
model Topic {
  id    String @id @default(cuid())
  name  String @unique // e.g., "Politics", "Cricket", "Technology"
  slug  String @unique // e.g., "politics", "cricket", "technology"
  followers FollowedTopic[]
}

// Join table for User and Topic
model FollowedTopic {
  userId  String
  topicId String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
  @@id([userId, topicId])
}

// Article model
model Article {
  id           String   @id @unique
  originalUri  String   @unique
  title        String
  content      String   @db.Text
  excerpt      String
  url          String
  image        String?
  source       String
  category     String
  publishedAt  DateTime
  aiSummary    String?  @db.Text
  aiBiasReport Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  interactions Interaction[]
  @@index([publishedAt])
}